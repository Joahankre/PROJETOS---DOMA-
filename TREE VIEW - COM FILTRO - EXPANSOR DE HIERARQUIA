Imports System.Windows.Forms
Imports Inventor

Sub Main()
    If ThisApplication.ActiveDocument.DocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then
        MessageBox.Show("Este script deve ser executado em um documento de desenho (.idw).", "Documento inválido", MessageBoxButtons.OK, MessageBoxIcon.Warning)
        Return
    End If

    Dim drawingDoc As DrawingDocument = ThisApplication.ActiveDocument
    Dim assemblyDoc As AssemblyDocument = GetAssemblyFromFirstSheet(drawingDoc)
    If assemblyDoc Is Nothing Then Return

    Dim bomRows As BOMRowsEnumerator = GetBOMRows(drawingDoc)
    If bomRows Is Nothing Then
        MessageBox.Show("Erro ao obter o BOM da montagem principal.", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error)
        Return
    End If

    Dim form As New Form With {
        .Text = "Inserir Vistas de Subcomponentes",
        .Width = 1000,
        .Height = 1000,
        .StartPosition = FormStartPosition.CenterScreen
    }

    Dim filterCombo As New ComboBox With {
        .Left = 10,
        .Top = 10,
        .Width = 300,
        .DropDownStyle = ComboBoxStyle.DropDownList
    }
    filterCombo.Items.AddRange({"Todos os Componentes", "Apenas 🚫 Não desenhados", "Apenas ✔️ Já desenhados", "Apenas 🔵 Em múltiplas folhas"})
    filterCombo.SelectedIndex = 0
    form.Controls.Add(filterCombo)

    Dim treeView As New TreeView With {
        .Left = 10,
        .Top = filterCombo.Bottom + 10,
        .Width = 960,
        .Height = 850,
        .CheckBoxes = True
    }
    form.Controls.Add(treeView)

    Dim atualizarArvore As Action = Sub()
        treeView.Nodes.Clear()
        Dim filtroSelecionado As String
        Select Case filterCombo.SelectedIndex
            Case 1 : filtroSelecionado = "🚫"
            Case 2 : filtroSelecionado = "✔️"
            Case 3 : filtroSelecionado = "🔵"
            Case Else : filtroSelecionado = "Todos"
        End Select
        For Each row As BOMRow In bomRows
            AddBOMRowNode(Row, treeView.Nodes, drawingDoc, filtroSelecionado)
        Next
        treeView.ExpandAll()
    End Sub

    AddHandler filterCombo.SelectedIndexChanged, Sub(sender As Object, e As EventArgs)
        atualizarArvore()
    End Sub

    atualizarArvore()

    Dim btnInsert As New Button With {
        .Text = "Inserir Vistas Selecionadas",
        .Left = 10,
        .Top = treeView.Bottom + 10,
        .Width = 200,
        .Height = 30
    }
    form.Controls.Add(btnInsert)

    AddHandler btnInsert.Click, Sub()
        Dim checked = GetCheckedNodes(treeView.Nodes)
        If checked.Count = 0 Then
            MessageBox.Show("Selecione ao menos um componente.", "Atenção", MessageBoxButtons.OK, MessageBoxIcon.Information)
            Return
        End If
        For Each node In checked
            Dim tagData = TryCast(node.Tag, Tuple(Of String, String, String))
            If tagData IsNot Nothing Then
                Dim partPath = tagData.Item1
                Dim itemNumber = tagData.Item2
                Dim labelNumber = tagData.Item3
                InsertBaseViewUsingCopiedSheet(drawingDoc, partPath, itemNumber, labelNumber)
            End If
        Next
        MessageBox.Show("Vistas inseridas com sucesso.", "Concluído", MessageBoxButtons.OK, MessageBoxIcon.Information)
        form.Close()
    End Sub

    ' Botão Expandir
    Dim btnExpandir As New Button With {
        .Text = "🔽 Expandir Tudo",
        .Left = btnInsert.Right + 10,
        .Top = btnInsert.Top,
        .Width = 150,
        .Height = 30
    }
    form.Controls.Add(btnExpandir)
    AddHandler btnExpandir.Click, Sub()
        treeView.BeginUpdate()
        ExpandirOuContrairTodos(treeView.Nodes, True)
        treeView.EndUpdate()
    End Sub

    ' Botão Recolher
    Dim btnRecolher As New Button With {
        .Text = "🔼 Recolher Tudo",
        .Left = btnExpandir.Right + 10,
        .Top = btnInsert.Top,
        .Width = 150,
        .Height = 30
    }
    form.Controls.Add(btnRecolher)
    AddHandler btnRecolher.Click, Sub()
        treeView.BeginUpdate()
        ExpandirOuContrairTodos(treeView.Nodes, False)
        treeView.EndUpdate()
    End Sub

    form.ShowDialog()
End Sub

Function GetAssemblyFromFirstSheet(drawingDoc As DrawingDocument) As AssemblyDocument
    Try
        Dim firstSheet = drawingDoc.Sheets.Item(1)
        Dim baseView = firstSheet.DrawingViews.Item(1)
        Dim refDoc = baseView.ReferencedDocumentDescriptor.ReferencedDocument
        If refDoc.DocumentType = DocumentTypeEnum.kAssemblyDocumentObject Then
            Return CType(refDoc, AssemblyDocument)
        Else
            MessageBox.Show("A primeira folha não representa uma montagem.", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End If
    Catch ex As Exception
        MessageBox.Show("Erro ao acessar montagem da primeira folha:" & vbCrLf & ex.Message, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error)
    End Try
    Return Nothing
End Function

Function GetBOMRows(drawingDoc As DrawingDocument) As BOMRowsEnumerator
    Try
        Dim refDoc = drawingDoc.Sheets.Item(1).DrawingViews.Item(1).ReferencedDocumentDescriptor.ReferencedDocument
        If Not TypeOf refDoc Is AssemblyDocument Then Return Nothing
        Dim asm As AssemblyDocument = CType(refDoc, AssemblyDocument)
        With asm.ComponentDefinition.BOM
            .StructuredViewEnabled = True
            .StructuredViewFirstLevelOnly = False
            For Each view As BOMView In .BOMViews
                If View.ViewType = BOMViewTypeEnum.kStructuredBOMViewType Then
                    Return View.BOMRows
                End If
            Next
        End With
    Catch
    End Try
    Return Nothing
End Function

Function AddBOMRowNode(row As BOMRow, parent As TreeNodeCollection, drawingDoc As DrawingDocument, filtroStatus As String) As Boolean
    Dim docPath As String = ""
    Dim partName As String = ""
    Dim itemName As String = ""

    Try
        If row.ComponentDefinitions.Count > 0 Then
            Dim doc = row.ComponentDefinitions.Item(1).Document
            docPath = doc.FullFileName
            Try
                partName = doc.PropertySets.Item("Design Tracking Properties").Item("Part Number").Value
            Catch
                partName = ""
            End Try
        End If
    Catch
    End Try

    Try
        itemName = row.Name
    Catch
        itemName = row.ItemNumber
    End Try

    Dim itemNumber As String = row.ItemNumber
    Dim inDrawing As Boolean = False
    Dim pages As New List(Of String)()

    For Each sh In drawingDoc.Sheets
        For Each view In sh.DrawingViews
            Try
                Dim rd = View.ReferencedDocumentDescriptor.ReferencedDocument
                If rd.FullFileName.ToLower() = docPath.ToLower() Then
                    inDrawing = True
                    Dim pageNum As String = If(sh.Name.Contains(":"), sh.Name.Substring(sh.Name.LastIndexOf(":") + 1).PadLeft(2, "0"c), "01")
                    If Not pages.Contains(pageNum) Then pages.Add(pageNum)
                End If
            Catch
            End Try
        Next
    Next

    pages.Sort()
    Dim status As String
    Dim pageText As String = ""

    If Not inDrawing Then
        status = "🚫"
    ElseIf pages.Count = 1 Then
        status = "✔️"
        pageText = $"[Pág: {pages(0)}]"
    Else
        status = "🔵"
        pageText = "[Pág: " & String.Join(", ", pages) & "]"
    End If

    Dim filhoAdicionado As Boolean = False
    Dim thisNode As New TreeNode()
    If row.ChildRows IsNot Nothing Then
        For Each child In row.ChildRows
            Dim filhoFoiAdicionado = AddBOMRowNode(child, thisNode.Nodes, drawingDoc, filtroStatus)
            If filhoFoiAdicionado Then
                filhoAdicionado = True
            End If
        Next
    End If

    If filtroStatus = "Todos" Or status = filtroStatus Or filhoAdicionado Then
        Dim labelNumber As String = If(Not String.IsNullOrEmpty(partName), partName, itemNumber)
        Dim nodeText As String = $"({status}) {itemNumber}–{labelNumber} {pageText}"
        Dim tagData As Tuple(Of String, String, String) = Tuple.Create(docPath, itemNumber, labelNumber)

        thisNode.Text = nodeText
        thisNode.Tag = tagData
        thisNode.Name = itemNumber
        parent.Add(thisNode)
        Return True
    End If

    Return False
End Function

Function GetCheckedNodes(nodes As TreeNodeCollection) As List(Of TreeNode)
    Dim list As New List(Of TreeNode)()
    For Each n As TreeNode In nodes
        If n.Checked Then list.Add(n)
        list.AddRange(GetCheckedNodes(n.Nodes))
    Next
    Return list
End Function

Private Function CalcularEscalaIdeal(compDef As ComponentDefinition) As Double
    Dim oBox As Box = compDef.RangeBox

    Dim largura As Double = Math.Abs(oBox.MaxPoint.X - oBox.MinPoint.X)
    Dim altura As Double = Math.Abs(oBox.MaxPoint.Y - oBox.MinPoint.Y)
    Dim profundidade As Double = Math.Abs(oBox.MaxPoint.Z - oBox.MinPoint.Z)

    Dim tamanhoMaximo As Double = Math.Max(largura, Math.Max(altura, profundidade)) * 10

    Dim areaUtil As Double = 180 ' mm

    Dim escala As Double = areaUtil / tamanhoMaximo

    If escala >= 1 Then
        escala = 1
    ElseIf escala >= 0.5 Then
        escala = 0.5
    ElseIf escala >= 0.2 Then
        escala = 0.2
    ElseIf escala >= 0.1 Then
        escala = 0.1
    Else
        escala = 0.05
    End If

    Return escala
End Function


Sub InsertBaseViewUsingCopiedSheet(drawingDoc As DrawingDocument, partPath As String, itemNumber As String, labelNumber As String)
    Try
        Dim partDoc As Document = ThisApplication.Documents.Open(partPath, False)
        Dim folhaModelo As Sheet = drawingDoc.Sheets.Item(drawingDoc.Sheets.Count)
        Dim docTemp As DrawingDocument = ThisApplication.Documents.Add(DocumentTypeEnum.kDrawingDocumentObject, , False)
        Dim folhaTemp As Sheet = folhaModelo.CopyTo(docTemp)
        Dim novaFolha As Sheet = folhaTemp.CopyTo(drawingDoc)
        docTemp.Close(True)
        novaFolha.Name = $"{itemNumber} – {labelNumber}"

        Dim viewsToDelete As New List(Of DrawingView)
        For Each view As DrawingView In novaFolha.DrawingViews
            viewsToDelete.Add(View)
        Next
        For Each view As DrawingView In viewsToDelete
            View.Delete()
        Next

        novaFolha.Activate()

        Dim escala As Double = 1
        If TypeOf partDoc.ComponentDefinition Is ComponentDefinition Then
            escala = CalcularEscalaIdeal(partDoc.ComponentDefinition)
        End If

        Dim tg = ThisApplication.TransientGeometry
        Dim pt = tg.CreatePoint2d(10, 10)

        novaFolha.DrawingViews.AddBaseView(partDoc, pt, escala,
            ViewOrientationTypeEnum.kDefaultViewOrientation,
            DrawingViewStyleEnum.kHiddenLineRemovedDrawingViewStyle)

        partDoc.Close(False)
    Catch ex As Exception
        MessageBox.Show("Erro ao inserir vista: " & ex.Message, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error)
    End Try
End Sub

Sub ExpandirOuContrairTodos(nodes As TreeNodeCollection, expandir As Boolean)
    For Each node As TreeNode In nodes
        If expandir Then node.Expand() Else node.Collapse()
        ExpandirOuContrairTodos(node.Nodes, expandir)
    Next
End Sub
